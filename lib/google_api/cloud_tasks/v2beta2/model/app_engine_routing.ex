# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This file is auto generated by the elixir code generator program.
# Do not edit this file manually.

defmodule GoogleApi.CloudTasks.V2beta2.Model.AppEngineRouting do
  @moduledoc """
  App Engine Routing.

  Defines routing characteristics specific to App Engine - service, version,
  and instance.

  For more information about services, versions, and instances see
  [An Overview of App
  Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
  [Microservices Architecture on Google App
  Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
  [App Engine Standard request
  routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
  and [App Engine Flex request
  routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).

  ## Attributes

  *   `host` (*type:* `String.t`, *default:* `nil`) - Output only. The host that the task is sent to.

      For more information, see
      [How Requests are
      Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).

      The host is constructed as:


      * `host = [application_domain_name]`</br>
        `| [service] + '.' + [application_domain_name]`</br>
        `| [version] + '.' + [application_domain_name]`</br>
        `| [version_dot_service]+ '.' + [application_domain_name]`</br>
        `| [instance] + '.' + [application_domain_name]`</br>
        `| [instance_dot_service] + '.' + [application_domain_name]`</br>
        `| [instance_dot_version] + '.' + [application_domain_name]`</br>
        `| [instance_dot_version_dot_service] + '.' + [application_domain_name]`

      * `application_domain_name` = The domain name of the app, for
        example <app-id>.appspot.com, which is associated with the
        queue's project ID. Some tasks which were created using the App Engine
        SDK use a custom domain name.

      * `service =` service

      * `version =` version

      * `version_dot_service =`
        version `+ '.' +`
        service

      * `instance =` instance

      * `instance_dot_service =`
        instance `+ '.' +`
        service

      * `instance_dot_version =`
        instance `+ '.' +`
        version

      * `instance_dot_version_dot_service =`
        instance `+ '.' +`
        version `+ '.' +`
        service

      If service is empty, then the task will be sent
      to the service which is the default service when the task is attempted.

      If version is empty, then the task will be sent
      to the version which is the default version when the task is attempted.

      If instance is empty, then the task
      will be sent to an instance which is available when the task is
      attempted.

      If service,
      version, or
      instance is invalid, then the task
      will be sent to the default version of the default service when
      the task is attempted.
  *   `instance` (*type:* `String.t`, *default:* `nil`) - App instance.

      By default, the task is sent to an instance which is available when
      the task is attempted.

      Requests can only be sent to a specific instance if
      [manual scaling is used in App Engine
      Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
      App Engine Flex does not support instances. For more information, see
      [App Engine Standard request
      routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
      and [App Engine Flex request
      routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
  *   `service` (*type:* `String.t`, *default:* `nil`) - App service.

      By default, the task is sent to the service which is the default
      service when the task is attempted.

      For some queues or tasks which were created using the App Engine
      Task Queue API, host is not parsable
      into service,
      version, and
      instance. For example, some tasks
      which were created using the App Engine SDK use a custom domain
      name; custom domains are not parsed by Cloud Tasks. If
      host is not parsable, then
      service,
      version, and
      instance are the empty string.
  *   `version` (*type:* `String.t`, *default:* `nil`) - App version.

      By default, the task is sent to the version which is the default
      version when the task is attempted.

      For some queues or tasks which were created using the App Engine
      Task Queue API, host is not parsable
      into service,
      version, and
      instance. For example, some tasks
      which were created using the App Engine SDK use a custom domain
      name; custom domains are not parsed by Cloud Tasks. If
      host is not parsable, then
      service,
      version, and
      instance are the empty string.
  """

  use GoogleApi.Gax.ModelBase

  @type t :: %__MODULE__{
          :host => String.t(),
          :instance => String.t(),
          :service => String.t(),
          :version => String.t()
        }

  field(:host)
  field(:instance)
  field(:service)
  field(:version)
end

defimpl Poison.Decoder, for: GoogleApi.CloudTasks.V2beta2.Model.AppEngineRouting do
  def decode(value, options) do
    GoogleApi.CloudTasks.V2beta2.Model.AppEngineRouting.decode(value, options)
  end
end

defimpl Poison.Encoder, for: GoogleApi.CloudTasks.V2beta2.Model.AppEngineRouting do
  def encode(value, options) do
    GoogleApi.Gax.ModelBase.encode(value, options)
  end
end
